{
  // Place your snippets for ts here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "it": {
    "prefix": "it",
    "description": "Unit test it block",
    "body": [
      "it('$1', () => {",
      "  $2",
      "})"
    ]
  },
  "mockModule": {
    "prefix": "mockM",
    "description": "Mock Module jest helper",
    "body": [
      "/* eslint import/first:0 import/order:0 */",
      "import { mockModule } from '~/../shared/jestHelpers'",
      "const { $1 } = mockModule<['$1']>('$2') // for multiple exports",
      "const $1 = mockModule('$2') // for single/default exports",
      "$1.mockReturnValue({",
      "  $3",
      "})"
    ],
  },
  "unit-test": {
    "prefix": "describe",
    "description": "Basic vue unit test scaffold",
    "body": [
      "/* eslint import/first:0 import/order:0 */",
      "import { mockModule } from '~/../shared/jestHelpers'",
      "const { ${1:useContext} } = mockModule<['$1']>('${2:@nuxtjs/composition-api}') // for multiple exports",
      "const $1 = mockModule('${2:@nuxtjs/composition-api}') // for single/default exports",
      "import { shallowMount } from '@vue/test-utils'",
      "import ${TM_FILENAME/(.*).spec.ts$/$1/} from './${TM_FILENAME/(.*).spec.ts$/$1/}.vue'",
      "",
      "describe('${TM_FILENAME/(.*).spec.ts$/$1/}', () => {",
      "  function mountComponent () {",
      "    return shallowMount(${TM_FILENAME/(.*).spec.ts$/$1/}, {",
      "      stubs: {",
      "        // Icon: true, // Stub child components",
      "      },",
      "      propsData: {",
      "        // Pass in default props",
      "      },",
      "    })",
      "  }",
      "",
      "  it('can mount', () => {",
      "    const wrapper = mountComponent()",
      "    expect(wrapper.exists()).toBe(true)",
      "  })",
      "",
      "  it('$4', () => {",
      "    $5",
      "  })",
      "})",
      "",
    ],
  }
}
