{
	// Place your snippets for vue here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"$t": {
		"prefix": "$t",
		"body": [
			"{{ \\$t('$TM_SELECTED_TEXT$0') }}",
		],
		"description": "Adds a translation tag."
	},

	"component": {
		"prefix": "component",
		"body": [
			"<template>",
			"  <div>",
			"    <p>{{ greeting }}</p>",
			"    <p>{{ computedGreeting }}</p>",
			"  </div>",
			"</template>",
			"",
			"<script lang=\"ts\">",
			"import { defineComponent, ref, computed } from '@nuxtjs/composition-api'",
			"",
			"export default defineComponent({",
			"  props: {",
			"    name: {",
			"      type: String,",
			"      required: false,",
			"      default: 'Bob',",
			"    },",
			"  },",
			"",
			"  setup (props, { emit }) {",
			"    const greeting = ref('Hello')",
			"",
			"    const computedGreeting = computed(() => `${greeting.value} ${props.name}`)",
			"",
			"    const emitEvent = () => {",
			"      emit('example')",
			"    }",
			"",
			"    return {",
			"      greeting,",
			"      computedGreeting,",
			"      emitEvent,",
			"    }",
			"  },",
			"})",
			"</script>",
			"",
		],
		"description": "Boilerplate for a Vue component with Composition API."
	},

	"vue": {
		"prefix": "vue",
		"body": [
			"<template>",
			"  $1",
			"</template>",
			"",
			"<script lang=\"ts\">",
			"import { defineComponent } from '@nuxtjs/composition-api'",
			"",
			"export default defineComponent({",
			"  $2",
			"})",
			"</script>",
		],
		"description": "Minimum boilerplate for a component"
	},

	"ref": {
		"prefix": "ref",
		"body": [
			"const $1 = ref($2)",
		],
		"description": "Adds a ref using the Composition API."
	},

	"computed": {
		"prefix": "computed",
		"body": [
			"const $1 = computed(() => $2)",
		],
		"description": "Adds a computed ref using the Composition API."
	},

	"method": {
		"prefix": "method",
		"body": [
			"const $1 = ($2) => {",
			"  $3",
			"}",
		],
		"description": "Adds a method using the Composition API."
	},
}